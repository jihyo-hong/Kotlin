<<변수와 자료형>>
- 코틀린은 자료형 기반 언어이므로 변수를 만들 때 자료형을 적어야 함
- 물론 안 적어도 되지만 이 경우 초기화는 필수
  컴파일러가 자료형을 추론해야 하기 때문
- var/val은 언제나 필수!(변수라는 것을 구분하기 위함)
- 클래스의 중괄호 안에서 만든 변수는 속성이라고 함

<<널 허용 자료형>>
- 자바에서는 변수에 값이 없는 경우 보통 null을 이용함
  하지만 이는 NPE(NullPointerException)을 발생시킴
- 그래서 코틀린에서는 null을 다루는 변수를 따로 선언할 수 있음(래핑)
- 자료형 뒤에 ?을 붙이면 null 사용 가능 ex) var s: String?
- 이렇게 선언된 변수는 두 가지 방법으로 사용할 수 있음
  1. 세이프 콜(?.): (변수 == null ? null : 변수의 값)와 같음!
  2. non-null(!!): 해당 변수가 null이 아님을 보장(=강제 컴파일이므로 오류가 발생할 수 있음)
- 엘비스 연산자(?:): 세이프 콜에서 null 대신 지정한 값을 반환하도록 함
  ex) s?.length ?: -1
      ?:의 오른쪽에는 함수가 와도 됨
- 널 허용 자료형 변수의 속성은 접근할 수 없음
  따라서 변수 뒤에 !!을 붙이면 원래 자료형으로 바뀜(언래핑)
- 조건문을 이용해 null이 아님을 체크하면 묵시적으로 언래핑이 됨!

<<자료형과 관련된 여러 개념>>
- 문자열을 숫자로 변환: toInt(), toDouble(), toFloat()...
- 두 값을 비교: != == >= 요런 거 쓰면 됨!
              자바와는 달리 문자열도 같음(일관성을 위해 굳이 equals 안 씀)
- Any: 자료형이 확실하지 않을 때 사용
- is: Any로 선언된 변수의 자료형이 궁금할 때 cf) if (변수 이름 is 자료형)
- as: Any로 선언된 변수의 자료형을 변환 cf) 변수 이름 as 자료형
- as?: 그냥 as는 예외가 발생할 수 있지만 as?는 null을 반환

<<상수와 패키지 변수>>
- val 변수는 값을 변경할 수 없으니까 상수인 걸까? 아님
- 상수는 다른 파일에서도 접근할 수 있다는 점에서 val과 다름
- 상수를 만드는 두 가지 방법
  1 companion object: 동반 객체
     ex) companion object { const val 변수 이름= "초기값" }
     다른 파일에서는 클래스 이름.변수 이름으로 접근!
  2 패키지 변수
     - MainActivity.kt가 들어 있는 폴더에 패키지 생성
     - 그 패키지 안에 Kotlin File/Class 파일 생성(대충 이름은 const)
     - 이 파일에는 패키지를 지정하는 한 줄만 작성되어 있는데 그 밑에 변수를 선언하면 끝
       (다른 곳에서 변수에 접근할 때에는 패키지와 변수만을 이용하므로 다른 건 필요없기 때문)
     - 사용할 때에는 패키지를 import 해서 사용
- 상수가 왜 필요할까?
  : 협업 시 클래스나 변수가 충돌하지 않게 하기 위함(패키지가 다르면 다른 거임!)

<<오류사항>>
1 This view is not constrained vertically
  콘텐츠들 간의 연결이 없어서 발생하는 문제: 실제 실행 시 화면과 다르게 나올 수 있음
  마법봉(?) 누르면 연결이 생김

2 Missing autofillhints attribute
  Android 8.0(API 26)부터 지원되는 자동완성 기능에 대한 코드가 없어서 발생하는 문제
  android:autofillhints="name" // 주소나 신용카드 정보 등등 가능!
  android:importantForAutofill="no" // 자동완성 안 함

3 Hardcoded string
  하드코딩으로 인해 발생하는 문제
  : 데이터를 코드에 바로 적는 것으로 빠르긴 하지만 유지보수도 불편하고 보안도 취약함
  대신 리소스화 하자! -> 변수를 만들어서 저장하는 것

  - app/res/values/strings.xml에 들어가서 코드를 추가하면 됨
    (프로젝트의 제목은 이미 변수로 설정되어 있는 것을 볼 수 있음)
  - <string name="변수 이름">글자</string>
  - 그다음 글자를 넣고 싶은 곳에 @string/변수 이름 쓰면 끝(신기..)

4 Redundant curly braces in string template
  문자열 템플릿에서 {} 이게 불필요하다는 뜻
  : 문자열 안에서 변수의 값을 가져올 수 있는 것
    - $변수이름 과 같이 사용하면 됨(표현식도 가능)
    - 뒤에 바로 문자열을 쓴다면 ${변수이름} 이렇게 사용하는 것이 좋음
      {} 이게 없다면 그 문자열까지 변수 이름으로 읽어 버릴 수 있기 때문
      기호(. ,)이나 공백이 오는 건 상관없음!
  이유를 찾아봤는데 그냥 코틀린이 간단한 걸 좋아해서 그런 듯..

<<복습: 계산기 만들기!>>
1 숫자 2개를 입력받을 Plain Text와 Button 4개, TextView 한 개를 갖다 놓음
2 text hint 등등 설정해 주고 오류 사항 수정(hadrded coding, 마법봉, autofill...)
3 그냥 입력만 받고 계산하고 끝내려다가 예외들을 처리하기로 함
  - 숫자를 하나만 입력하는 경우: 전달된 텍스트가 없을 것이므로 == ""일 때 메시지 출력
  - 입력이 숫자가 아닌 경우: toInt() 함수가 실행되는 과정에서 예외가 발생할 것이므로 try catch로 처리(NumberFormatException)
  - 0으로 나누려고 하는 경우: 역시 예외가 발생할 테니 위와 같이 처리(ArithmeticException)

<<메모>>
- setText 관련해서 경고 메시지 나타나는 거 알아보기
- 계산기에서 연산 4개의 코드에 대해 중복되는 부분이 많아서 함수로 처리하고 싶음
- try catch 말고 예외를 좀 더 효율적으로 처리할 수 없을까?
  원래는 예외를 던지기 전에 정수인지를 판별하도록 하려 했는데 거기까진 모르겠어서 패스,,